# GitHub Actions does not properly support variables in YAML files.
# As a workaround, a job can be used to produce output parameters,
# which can be referenced by other jobs.

name: Parameters

on:
  workflow_call:
    inputs:
      ubuntu_image:
        description: 'Name of the Ubuntu image.'
        required: false
        default: 'ubuntu-24.04'
        type: string
      # Integrated from pyTooling/Actions::PrepareJob.yml, because GitHub is limited to 20 reusable workflows.
      main_branch:
        description: 'Name of the branch containing releases.'
        required: false
        default: 'master'
        type: string
      development_branch:
        description: 'Name of the development branch containing features.'
        required: false
        default: 'dev'
        type: string
      release_branch:
        description: 'Name of the branch containing releases and nightly builds.'
        required: false
        default: 'master'
        type: string
      test_tag:
        description: 'Name of the tag used for testing nightly builds.'
        required: false
        default: 'testing'
        type: string
      nightly_tag_pattern:
        description: 'Pattern for nightly tags on the release branch.'
        required: false
        default: 'nightly'
        type: string
      release_tag_pattern:
        description: 'Pattern for release tags on the release branch. Usually: vXX.YY.ZZ'
        required: false
        default: '(v|r)?[0-9]+(\.[0-9]+){0,2}(-(dev|alpha|beta|rc)([0-9]*))?'
        type: string
      # End of integration

      package_name:
        description: 'Base-name of all GHDL artifacts.'
        required: true
        type: string
      library_name:
        description: 'Base-name of all libghdl artifacts.'
        required: true
        type: string
      pyghdl_name:
        description: 'Base-name of all pyghdl artifacts.'
        required: true
        type: string
      testsuites:
        description: "List of GHDL testsuites to execute while testing (space separated). Alternatively: 'all' or 'none'"
        required: false
        default: 'all'
        type: string

    outputs:
      # Integrated from pyTooling/Actions::PrepareJob.yml, because GitHub is limited to 20 reusable workflows.
      on_main_branch:
        description: ""
        value: ${{ jobs.Prepare.outputs.on_main_branch }}
      on_dev_branch:
        description: ""
        value: ${{ jobs.Prepare.outputs.on_dev_branch }}
      on_release_branch:
        description: ""
        value: ${{ jobs.Prepare.outputs.on_release_branch }}
      is_regular_commit:
        description: ""
        value: ${{ jobs.Prepare.outputs.is_regular_commit }}
      is_merge_commit:
        description: ""
        value: ${{ jobs.Prepare.outputs.is_merge_commit }}
      is_release_commit:
        description: ""
        value: ${{ jobs.Prepare.outputs.is_release_commit }}
      is_nightly_tag:
        description: ""
        value: ${{ jobs.Prepare.outputs.is_nightly_tag }}
      is_release_tag:
        description: ""
        value: ${{ jobs.Prepare.outputs.is_release_tag }}
      is_tagged_test:
        description: ""
        value: ${{ jobs.Prepare.outputs.is_tagged_test }}
      ref_kind:
        description: ""
        value: ${{ jobs.Prepare.outputs.ref_kind }}
      branch:
        description: ""
        value: ${{ jobs.Prepare.outputs.branch }}
      tag:
        description: ""
        value: ${{ jobs.Prepare.outputs.tag }}
      pull:
        description: ""
        value: ${{ jobs.Prepare.outputs.pull }}
      version:
        description: ""
        value: ${{ jobs.Prepare.outputs.version }}
      pr_title:
        description: ""
        value: ${{ jobs.Prepare.outputs.pr_title }}
      pr_number:
        description: ""
        value: ${{ jobs.Prepare.outputs.pr_number }}
      # End of integration

      ghdl_version:
        description: "GHDL's version."
        value: ${{ jobs.Parameters.outputs.ghdl_version }}
      pyghdl_version:
        description: "pyGHDL's version."
        value: ${{ jobs.Parameters.outputs.pyghdl_version }}
      pacghdl_version:
        description: "GHDL's version for MSYS2."
        value: ${{ jobs.Parameters.outputs.pacghdl_version }}
      pacghdl_release:
        description: "GHDL's MSYS2 package release."
        value: ${{ jobs.Parameters.outputs.pacghdl_release }}
      setup_version:
        description: "GHDL's version for setup-ghdl."
        value: ${{ jobs.Parameters.outputs.setup_version }}
      ghdl_basename:
        description: "Artifact basename for GHDL."
        value: ${{ inputs.package_name }}
      libghdl_basename:
        description: "Artifact basename for libghdl."
        value: ${{ inputs.library_name }}
      pyghdl_basename:
        description: "Artifact basename for pyghdl."
        value: ${{ inputs.pyghdl_name }}
      testsuites:
        description: "List of GHDL testsuites to execute while testing (space separated)."
        value: ${{ jobs.Parameters.outputs.testsuites }}

jobs:
  # Integrated from pyTooling/Actions::PrepareJob.yml, because GitHub is limited to 20 reusable workflows.
  Prepare:
    name: Extract Information
    runs-on: ubuntu-24.04
    outputs:
      on_main_branch:    ${{ steps.Classify.outputs.on_main_branch }}
      on_dev_branch:     ${{ steps.Classify.outputs.on_dev_branch }}
      on_release_branch: ${{ steps.Classify.outputs.on_release_branch }}
      is_regular_commit: ${{ steps.Classify.outputs.is_regular_commit }}
      is_merge_commit:   ${{ steps.Classify.outputs.is_merge_commit }}
      is_release_commit: ${{ steps.Classify.outputs.is_release_commit }}
      is_nightly_tag:    ${{ steps.Classify.outputs.is_nightly_tag }}
      is_release_tag:    ${{ steps.Classify.outputs.is_release_tag }}
      is_tagged_test:    ${{ steps.Classify.outputs.is_tagged_test }}
      ref_kind:          ${{ steps.Classify.outputs.ref_kind }}
      branch:            ${{ steps.Classify.outputs.branch }}
      tag:               ${{ steps.Classify.outputs.tag }}
      pull:              ${{ steps.Classify.outputs.pull }}
      version:           ${{ steps.Classify.outputs.version || steps.FindPullRequest.outputs.pr_version }}
#      release_version:   ${{ steps.FindPullRequest.outputs.release_version }}
      pr_title:          ${{ steps.FindPullRequest.outputs.pr_title }}
      pr_number:         ${{ steps.FindPullRequest.outputs.pr_number }}

    steps:
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v5
        with:
          # The command 'git describe' (used for version) needs the history.
          fetch-depth: 0

      - name: üñâ GitHub context information
        run: |
          printf "%s\n" "github.event_name: ${{ github.event_name }}"
          printf "%s\n" "github.actor:      ${{ github.actor }}"
          printf "%s\n" "github.ref:        ${{ github.ref }}"
          printf "%s\n" "github.base_ref:   ${{ github.base_ref }}"
          printf "%s\n" "github.head_ref:   ${{ github.head_ref }}"
          printf "%s\n" "github.sha:        ${{ github.sha }}"

      - name: üñâ Classify commit
        id: Classify
        run: |
          set +e

          ANSI_LIGHT_RED=$'\x1b[91m'
          ANSI_LIGHT_GREEN=$'\x1b[92m'
          ANSI_LIGHT_YELLOW=$'\x1b[93m'
          ANSI_LIGHT_BLUE=$'\x1b[94m'
          ANSI_NOCOLOR=$'\x1b[0m'

          ref="${{ github.ref }}"
          on_main_branch="false"
          on_dev_branch="false"
          on_release_branch="false"
          is_regular_commit="false"
          is_merge_commit="false"
          is_release_commit="false"
          is_nightly_tag="false"
          is_release_tag="false"
          is_tagged_test="false"
          ref_kind="unknown"
          branch=""
          tag=""
          pull=""
          version=""

          if [[ "${ref:0:11}" == "refs/heads/" ]]; then
            ref_kind="branch"
            branch="${ref:11}"

            printf "Commit check:\n"

            if [[ "${branch}" == "${{ inputs.main_branch }}" ]]; then
              on_main_branch="true"

              if [[ -z "$(git rev-list -1 --merges ${{ github.sha }}~1..${{ github.sha }})" ]]; then
                is_regular_commit="true"
                printf "  ${ANSI_LIGHT_YELLOW}regular "
              else
                is_merge_commit="true"
                printf "  ${ANSI_LIGHT_GREEN}merge "
              fi
              printf "commit${ANSI_NOCOLOR} on main branch ${ANSI_LIGHT_BLUE}'%s'${ANSI_NOCOLOR}\n" "${{ inputs.main_branch }}"
            fi

            if [[ "${branch}" == "${{ inputs.development_branch }}" ]]; then
              on_dev_branch="true"

              if [[ -z "$(git rev-list -1 --merges ${{ github.sha }}~1..${{ github.sha }})" ]]; then
                is_regular_commit="true"
                printf "  ${ANSI_LIGHT_YELLOW}regular "
              else
                is_merge_commit="true"
                printf "  ${ANSI_LIGHT_GREEN}merge "
              fi
              printf "commit${ANSI_NOCOLOR} on development branch ${ANSI_LIGHT_BLUE}'%s'${ANSI_NOCOLOR}\n" "${{ inputs.development_branch }}"
            fi

            if [[ "${branch}" == "${{ inputs.release_branch }}" ]]; then
              on_release_branch="true"

              if [[ -z "$(git rev-list -1 --merges ${{ github.sha }}~1..${{ github.sha }})" ]]; then
                is_regular_commit="true"
                printf "  ${ANSI_LIGHT_YELLOW}regular "
              else
                is_release_commit="true"
                printf "  ${ANSI_LIGHT_GREEN}release "
              fi
              printf "commit${ANSI_NOCOLOR} on release branch ${ANSI_LIGHT_BLUE}'%s'${ANSI_NOCOLOR}\n" "${{ inputs.release_branch }}"
            fi
          elif [[ "${ref:0:10}" == "refs/tags/" ]]; then
            ref_kind="tag"
            tag="${ref:10}"

            printf "Tag check:\n"
            if [[ "${tag}" == "${{ inputs.test_tag }}" ]]; then
              is_tagged_test="true"

              printf "  Check if tag is on release branch '%s' ... [skipped]" "${{ inputs.release_branch }}"
            else
              printf "  Check if tag is on release branch '%s' ... " "${{ inputs.release_branch }}"
              git branch --remotes --contains $(git rev-parse --verify "tags/${tag}~0") | grep "origin/${{ inputs.release_branch }}" > /dev/null
              if [[ $? -eq 0 ]]; then
                printf "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}\n"
              else
                printf "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}\n"
                printf "${ANSI_LIGHT_RED}Tag '%s' isn't on branch '%s'.${ANSI_NOCOLOR}\n" "${tag}" "${{ inputs.release_branch }}"
                printf "::error title=TagCheck::Tag '%s' isn't on branch '%s'.\n" "${tag}" "${{ inputs.release_branch }}"
                exit 1
              fi

              NIGHTLY_TAG_PATTERN='^${{ inputs.nightly_tag_pattern }}$'
              RELEASE_TAG_PATTERN='^${{ inputs.release_tag_pattern }}$'
              printf "  Check tag name against regexp '%s' ... " "${RELEASE_TAG_PATTERN}"
              if [[ "${tag}" =~ $NIGHTLY_TAG_PATTERN ]]; then
                printf "${ANSI_LIGHT_GREEN}[NIGHTLY]${ANSI_NOCOLOR}\n"
                is_nightly_tag="true"
              elif [[ "${tag}" =~ $RELEASE_TAG_PATTERN ]]; then
                printf "${ANSI_LIGHT_GREEN}[RELEASE]${ANSI_NOCOLOR}\n"
                version="${tag}"
                is_release_tag="true"
              else
                printf "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}\n"
                printf "${ANSI_LIGHT_RED}Tag name '%s' doesn't conform to regexp${ANSI_NOCOLOR}\n" "${tag}"
                printf "  ${ANSI_LIGHT_RED}nightly tag: %s${ANSI_NOCOLOR}\n" "${NIGHTLY_TAG_PATTERN}"
                printf "  ${ANSI_LIGHT_RED}release tag: %s${ANSI_NOCOLOR}\n" "${RELEASE_TAG_PATTERN}"
                printf "::error title=RexExpCheck::Tag name '%s' doesn't conform to regexp '%s' nor '%s'.\n" "${tag}" "${NIGHTLY_TAG_PATTERN}" "${RELEASE_TAG_PATTERN}"
                exit 1
              fi
            fi
          elif [[ "${ref:0:10}" == "refs/pull/" ]]; then
            ref_kind="pullrequest"

            printf "Rull Request check:\n"
          else
            printf "${ANSI_LIGHT_RED}Unknown Git reference '%s'.${ANSI_NOCOLOR}\n" "${{ github.ref }}"
            printf "::error title=Classify Commit::Unknown Git reference '%s'.\n" "${{ github.ref }}"
            exit 1
          fi

          tee --append "${GITHUB_OUTPUT}" <<EOF
          on_main_branch=${on_main_branch}
          on_dev_branch=${on_dev_branch}
          on_release_branch=${on_release_branch}
          is_regular_commit=${is_regular_commit}
          is_merge_commit=${is_merge_commit}
          is_release_commit=${is_release_commit}
          is_nightly_tag=${is_nightly_tag}
          is_release_tag=${is_release_tag}
          is_tagged_test=${is_tagged_test}
          ref_kind=${ref_kind}
          branch=${branch}
          tag=${tag}
          pull=${pull}
          version=${version}
          EOF

      - name: üîÅ Find merged PullRequest from second parent of current SHA (${{ github.sha }})
        id: FindPullRequest
        if: steps.Classify.outputs.is_merge_commit == 'true'
        run: |
          set +e

          ANSI_LIGHT_RED=$'\x1b[91m'
          ANSI_LIGHT_GREEN=$'\x1b[92m'
          ANSI_LIGHT_YELLOW=$'\x1b[93m'
          ANSI_LIGHT_BLUE=$'\x1b[94m'
          ANSI_NOCOLOR=$'\x1b[0m'

          export GH_TOKEN=${{ github.token }}

          printf "Read second parent of current SHA (%s) ... " "${{ github.ref }}"
          FATHER_SHA=$(git rev-parse ${{ github.ref }}^2)
          if [[ $? -ne 0 || "{FATHER_SHA}" == "" ]]; then
            printf "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}\n"
            printf "${ANSI_LIGHT_RED}Couldn't read second parent (father) of '%s'.${ANSI_NOCOLOR}\n" "${{ github.ref }}^2"
            printf "::error title=GitCommitHistoryError::Couldn't read second parent (father) of '%s'. -> %s\n" "${{ github.ref }}^2" "${FATHER_SHA}"
            exit 1
          else
            printf "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}\n"
          fi

          printf "Search Pull Request to '%s' and branch containing SHA %s ... " "${{ inputs.release_branch }}" "${FATHER_SHA}"
          PULL_REQUESTS=$(gh pr list --base "${{ inputs.release_branch }}" --search "${FATHER_SHA}" --state "merged" --json "title,number,mergedBy,mergedAt")
          if [[ $? -ne 0 || "${PULL_REQUESTS}" == "" ]]; then
            printf "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}\n"
            printf "${ANSI_LIGHT_RED}Couldn't find a merged Pull Request to '%s'. -> %s${ANSI_NOCOLOR}\n" "${{ inputs.release_branch }}" "${PULL_REQUESTS}"
            printf "::error title=PullRequest::Couldn't find a merged Pull Request to '%s'. -> %s\n" "${{ inputs.release_branch }}" "${PULL_REQUESTS}"
            exit 1
          else
            printf "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}\n"

            PR_TITLE="$(    printf "%s\n" "${PULL_REQUESTS}" | jq --raw-output ".[0].title")"
            PR_NUMBER="$(   printf "%s\n" "${PULL_REQUESTS}" | jq --raw-output ".[0].number")"
            PR_MERGED_BY="$(printf "%s\n" "${PULL_REQUESTS}" | jq --raw-output ".[0].mergedBy.login")"
            PR_MERGED_AT="$(printf "%s\n" "${PULL_REQUESTS}" | jq --raw-output ".[0].mergedAt")"

            printf "${ANSI_LIGHT_BLUE}Found Pull Request:${ANSI_NOCOLOR}\n"
            printf "  %s\n" "Title:    ${PR_TITLE}"
            printf "  %s\n" "Number:   ${PR_NUMBER}"
            printf "  %s\n" "MergedBy: ${PR_MERGED_BY}"
            printf "  %s\n" "MergedAt: ${PR_MERGED_AT} ($(date -d"${PR_MERGED_AT}" '+%d.%m.%Y - %H:%M:%S'))"
          fi

          RELEASE_TAG_PATTERN='^${{ inputs.release_tag_pattern }}$'
          printf "Check Pull Request title against regexp '%s' ... " "${RELEASE_TAG_PATTERN}"
          if [[ "${PR_TITLE}" =~ $RELEASE_TAG_PATTERN ]]; then
            printf "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}\n"
            RELEASE_VERSION="${PR_TITLE}"
          else
            printf "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}\n"
            printf "${ANSI_LIGHT_RED}Pull Request title '%s' doesn't conform to regexp '%s'.${ANSI_NOCOLOR}\n" "${PR_TITLE}" "${RELEASE_TAG_PATTERN}"
            printf "::error title=RexExpCheck::Pull Request title '%s' doesn't conform to regexp '%s'.\n" "${PR_TITLE}" "${RELEASE_TAG_PATTERN}"
            exit 1
          fi

          printf "Release tag: ${ANSI_LIGHT_GREEN}%s${ANSI_NOCOLOR}\n" "${RELEASE_VERSION}"
          tee --append "${GITHUB_OUTPUT}" <<EOF
          pr_version=${RELEASE_VERSION}
          pr_title=${PR_TITLE}
          pr_number=${PR_NUMBER}
          pr_mergedby=${PR_MERGED_BY}
          pr_mergedat=${PR_MERGED_AT}
          EOF

      - name: Debug
        run: |
          printf "on_main_branch:    %s\n" "${{ steps.Classify.outputs.on_main_branch }}"
          printf "on_dev_branch:     %s\n" "${{ steps.Classify.outputs.on_dev_branch }}"
          printf "on_release_branch: %s\n" "${{ steps.Classify.outputs.on_release_branch }}"
          printf "is_regular_commit: %s\n" "${{ steps.Classify.outputs.is_regular_commit }}"
          printf "is_merge_commit:   %s\n" "${{ steps.Classify.outputs.is_merge_commit }}"
          printf "is_release_commit: %s\n" "${{ steps.Classify.outputs.is_release_commit }}"
          printf "is_nightly_tag:    %s\n" "${{ steps.Classify.outputs.is_nightly_tag }}"
          printf "is_release_tag:    %s\n" "${{ steps.Classify.outputs.is_release_tag }}"
          printf "is_tagged_test:    %s\n" "${{ steps.Classify.outputs.is_tagged_test }}"
          printf "ref_kind:          %s\n" "${{ steps.Classify.outputs.ref_kind }}"
          printf "branch:            %s\n" "${{ steps.Classify.outputs.branch }}"
          printf "tag:               %s\n" "${{ steps.Classify.outputs.tag }}"
          printf "pull:              %s\n" "${{ steps.Classify.outputs.pull }}"
          printf "version from tag:  %s\n" "${{ steps.Classify.outputs.version }}"
          printf "version from pr:   %s\n" "${{ steps.FindPullRequest.outputs.pr_version }}"
          printf "version:           %s\n" "${{ steps.Classify.outputs.version || steps.FindPullRequest.outputs.pr_version }}"
          printf "pr title:          %s\n" "${{ steps.FindPullRequest.outputs.pr_title }}"
          printf "pr number:         %s\n" "${{ steps.FindPullRequest.outputs.pr_number }}"

  Parameters:
    runs-on: ${{ inputs.ubuntu_image }}
    outputs:
      testsuites:      ${{ steps.params.outputs.testsuites }}
      ghdl_version:    ${{ steps.params.outputs.ghdl_version }}
      pyghdl_version:  ${{ steps.params.outputs.pyghdl_version }}
      pacghdl_version: ${{ steps.params.outputs.pacghdl_version }}
      pacghdl_release: ${{ steps.params.outputs.pacghdl_release }}
      setup_version:   ${{ steps.params.outputs.setup_version }}

    steps:
      - name: '‚è¨ Checkout'
        uses: actions/checkout@v5

      - name: Generate 'params' and 'python_jobs'
        id: params
        run: |
          ghdl_version=$(grep "^ghdl_version=\".*\"$" ./configure)
          ghdl_version=${ghdl_version/ghdl_version=/}
          ghdl_version=${ghdl_version//\"/}
          printf "GHDL version: %s\n" "${ghdl_version}"

          pacmanPackageRelease=$(grep "^pkgrel=[1-9][0-9]*$" ./dist/msys2/llvm/PKGBUILD)
          pacmanPackageRelease=${pacmanPackageRelease/pkgrel=/}
          printf "Pacman package release: %s\n" "${pacmanPackageRelease}"

          printf "\n"
          tee "${GITHUB_OUTPUT}" <<EOF
          ghdl_version=${ghdl_version}
          EOF

          if [[ "${ghdl_version}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            pyghdl_version="${ghdl_version}"
            pacghdl_version="${ghdl_version}-${pacmanPackageRelease}"
            setup_version="${ghdl_version}"
          elif [[ "${ghdl_version}" =~ ^[0-9]+\.[0-9]+\.[0-9]+-dev$ ]]; then
            pyghdl_version="${ghdl_version/-dev/.dev0}"
            pacghdl_version="${ghdl_version/-dev/.dev}-${pacmanPackageRelease}"
            setup_version="nightly"
          elif [[ "${ghdl_version}" =~ ^[0-9]+\.[0-9]+\.[0-9]+-rc[0-9]+$ ]]; then
            pyghdl_version="${ghdl_version/-rc/rc}"
            pacghdl_version="${ghdl_version/-rc/.rc}-${pacmanPackageRelease}"
            setup_version="${ghdl_version}"
          else
            echo "::error title=%s::%s\n" "Parameters" "Unsupported GHDL version pattern '${ghdl_version}'."
            exit 1
          fi

          tee -a "${GITHUB_OUTPUT}" <<EOF
          pyghdl_version=${pyghdl_version}
          EOF

          tee -a "${GITHUB_OUTPUT}" <<EOF
          pacghdl_version=${pacghdl_version}
          EOF

          tee -a "${GITHUB_OUTPUT}" <<EOF
          pacghdl_release=${pacmanPackageRelease}
          EOF

          tee -a "${GITHUB_OUTPUT}" <<EOF
          setup_version=${setup_version}
          EOF

          if [ '${{ inputs.testsuites }}' == 'all' ]; then
            tee -a "${GITHUB_OUTPUT}" <<EOF
          testsuites=sanity gna vests synth vpi vhpi
          EOF
          else
            tee -a "${GITHUB_OUTPUT}" <<EOF
          testsuites=${{ inputs.testsuites }}
          EOF
          fi

      - name: Check variables
        run: |
          printf "ghdl_version:    %s\n" "${{ steps.params.outputs.ghdl_version }}"
          printf "pyghdl_version:  %s\n" "${{ steps.params.outputs.pyghdl_version }}"
          printf "pacghdl_version: %s\n" "${{ steps.params.outputs.pacghdl_version }}"
          printf "pacghdl_release: %s\n" "${{ steps.params.outputs.pacghdl_release }}"
          printf "testsuites:      %s\n" "${{ steps.params.outputs.testsuites }}"
