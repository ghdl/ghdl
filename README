This directory contains the sources of GHDL, the VHDL simulator.

GHDL is not an interpreter: it generates machine code from your design,
the only way for high speed simulation.

Main features are:
- handle very large designs like leon3/grlib.
- can write waveforms to a vcd or fst file.
- available on Linux (x86 and x86-64), Windows and Mac OS x
- partial support of PSL
- support vunit (https://github.com/LarsAsplund/vunit)
- support OSVVM (http://osvvm.org) through the VPI interface
- support cocotb

GHDL fully supports IEEE 1076-1987, IEEE 1076-1993, IEE 1076-2002 and
partially the 1076-2008 version of VHDL.

GHDL is free software.  See the file COPYING for copying permission.
The manuals, and some of the runtime libraries, are under different
terms; see the individual source files for details.

Doc is available on http://ghdl.readthedocs.org/en/latest/index.html

Building GHDL (Short instructions)
**********************************

If you aren't on linux, see below for full instructions.

You need GNAT GPL 2014 (or later) for x86 (32 or 64 bits).  GNAT is the GNU Ada
compiler and GNAT GPL is very easy to install (download anonymously from
libre.adacore.com, untar and run the doinstall script).

In the GHDL source directory, configure and build:
$ ./configure --prefix=/usr/local
$ make

At that place, you can already use the 'ghdl_mcode' built in the directory.
You can also install GHDL (the executable is installed as 'ghdl'):
$ make install

That's all!

Build GHDL (Long instructions)
******************************

GHDL supports many backend (code generator), so you first must choose
the backend you want to use.  There are currently 3 supported backends:

* gcc
* mcode (this is an internal code generator for x86_64 and i386)
* llvm (experimental)

Here is a short comparaison:

* gcc:
+ generated code is faster (particularly with -O or -O2)
+ generated code can be debugger (with -g)
+ the output is an executable
+ ported to many platforms (x86, x86_64, powerpc, sparc)
- analyze can takes time (particularly for big units)
- build is more complex

* mcode
+ very easy to build
- but x86_64/i386 only
+ very quick analysis time
+ can analyze very big designs
- simulation is slower
- no executable created

* llvm
+ same advantages of gcc (good generated code, debuggable)
+ easier to build than gcc

As GCC is written in Ada, you need to use the GNU Ada compiler (GNAT).
I recommend to use GNAT GPL from http://libre.adacore.com (free).
GHDL was tested with GNAT GPL 2014.  Any later version should work.
If you build with the mcode backend, you need an i386 version of GNAT.

Building with mcode backend
***************************

This is as simple as:
$ ./configure --prefix=PREFIX
  where PREFIX is the directory for installation
$ make
  This builds the ghdl_mcode executable, which can be used as is.
$ make install
  To install within PREFIX

Building with the gcc backend
*****************************

You need to download and untar the sources of
gcc version 4.9 [do not modify this line as this is read by scripts].

First configure ghdl and specify gcc source dir:
$ ./configure --with-gcc=/path/to/gcc/source/dir

Then invoke make to copy ghdl sources in the source dir:
$ make copy-sources

To build gcc, you must first compile gmp, mpfr and mpc (replace /usr/local
 by your prefix directory):
$ mkdir gmp-objs; cd gmp-objs
$ ../gmp-4.3.2/configure --prefix=/usr/local --disable-shared
$ make; make install
$ cd ..; mkdir mpfr-objs; cd mpfr-objs
$ ../mpfr-2.4.2/configure --prefix=/usr/local --disable-shared \
  --with-gmp=/usr/local
$ make; make install
$ cd ..; mkdir mpc-objs; cd mpc-objs
$ ../mpc-0.8.1/configure --prefix=/usr/local --disable-shared \
  --with-gmp=/usr/local
$ make; make install

Then configure gcc:
$ mkdir gcc-objs; cd gcc-objs
$ ../gcc-4.9.3/configure --prefix=/usr/local --enable-languages=c,vhdl \
  --disable-bootstrap --with-gmp=/usr/local --disable-lto --disable-multilib
$ make -j2

Finally install:
$ make install
or if you don't want to install makeinfo:
$ make install MAKEINFO=true

Building with the llvm backend
******************************

You need to build and install
llvm version 3.5 [do not modify this line as this is read by scripts].

First configure ghdl with '--with-llvm-config'
$ ./configure --with-llvm-config

If llvm-config is not in your path, you can specify it:
$ ./configure --with-llvm-config=LLVM_INSTALL/bin/llvm-config

If you want to have stack backtraces on errors (like assert failure or
index of out bounds), you need to configure and build libbacktrace from gcc
(you don't need to configure gcc), and add to configure:
  --with-backtrace-lib=/path-to-gcc-build/libbacktrace/.libs/libbacktrace.a

Then build with 'make' and install with 'make install'.

Notes for developpers
*********************

Developping with the gcc backend:
Once gcc (with ghdl) has been built once, it is possible to work on ghdl
sources tree without copying them in gcc tree. Commands are:
$ make ghdl1-gcc     	     # To build the compiler
$ make ghdl_gcc		     # To build the driver
$ make libs.vhdl.gcc	     # To compile the vhdl libraries
$ make grt-all		     # To build the ghdl runtime
$ make grt.links	     # To locally install the ghdl runtime
TODO: gcc object dir
